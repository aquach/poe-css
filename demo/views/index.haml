:css
  * {
    margin: 0;
    padding: 0;
  }

  .u-flexCenter {
    display: flex;
    width: 100%;
    align-items: top;
    justify-content: center;
  }

  .u-maxWidth {
    width: 100%;
  }

  body {
    padding: 0.5em;
  }

  .pane {
    padding: 0.5em;
  }

  .output {
    white-space: pre;
    font-family: monospace;
  }

  h1 {
    margin-bottom: 0.25em;
  }

%title PoE CSS Generator

.u-flexCenter
  .pane.u-maxWidth
    %h1 Input
    %textarea#input.u-maxWidth(style="height: 90vh")
      :plain
        @black: RGB(0, 0, 0)
        @white: RGB(255, 255, 255)

        @t1-gem-text-color: RGB(30, 200, 200)
        @t1-gem-border-color: RGB(30, 150, 180)
        @t1-gem-bg-color: @white

        @volume: 300
        @t1-drop-sound: 6 @volume
        @unique-drop-sound: 3 @volume
        @value-drop-sound: 2 @volume

        @gem-styling() {
          SetTextColor @t1-gem-text-color
          SetBorderColor @t1-gem-border-color
        }

        Class Gems {
          Hide
          SetFontSize 36
          SetBorderColor @black

          Quality >= 1 {
            Show
            SetFontSize 40
            SetBorderColor @t1-gem-border-color
          }

          BaseType "Detonate Mines" "Added Chaos Damage" "Vaal" "Enhance" | Quality >= 14 {
            Show
            SetFontSize 40
            @gem-styling()
            PlayAlertSound @value-drop-sound
          }

          BaseType "Portal" "Empower" "Enlighten" "Vaal Haste" "Vaal Grace" "Item Quantity" "Vaal Breach" {
            Show
            SetFontSize 45
            @gem-styling()
            PlayAlertSound @unique-drop-sound
          }
        }

  .pane.u-maxWidth
    %h1 Output
    %textarea.output.u-maxWidth#output(style="height: 90vh")

:javascript
  var inputNode = document.getElementById('input');
  var outputNode = document.getElementById('output');

  function compile() {
    var input = inputNode.value;

    fetch('compile?input=' + encodeURIComponent(input))
      .then(result => {
        if (result.ok) {
          result.text().then(o => { outputNode.innerHTML = o; })
        } else {
          outputNode.innerHTML = 'Parse Error';
        }
      });
  };

  inputNode.addEventListener('keyup', compile);
  compile();
